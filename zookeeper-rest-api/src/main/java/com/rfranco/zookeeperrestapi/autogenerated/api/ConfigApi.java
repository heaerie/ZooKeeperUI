/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3-SNAPSHOT).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.rfranco.zookeeperrestapi.autogenerated.api;

import com.rfranco.zookeeperrestapi.autogenerated.dtos.ChildrenNodes;
import com.rfranco.zookeeperrestapi.autogenerated.dtos.NodeCreationRequest;
import com.rfranco.zookeeperrestapi.autogenerated.dtos.NodeData;
import com.rfranco.zookeeperrestapi.autogenerated.dtos.NodeDataType;
import com.rfranco.zookeeperrestapi.autogenerated.dtos.NodeExport;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2017-12-05T13:08:55.108+01:00")

@Api(value = "Config", description = "the Config API")
public interface ConfigApi {

    @ApiOperation(value = "Creates a new child of the given data node.", notes = "Creates a new child of the given data node.", response = Void.class, tags={ "Config", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Successful request.No content is returned.", response = Void.class),
        @ApiResponse(code = 400, message = "Bad request. The request is not a well-formed request or it is missing some required parameters. An error message is returned indicating the nature of the error.", response = Void.class),
        @ApiResponse(code = 401, message = "Unauthorized call. Invalid user authentication cookie.", response = Void.class),
        @ApiResponse(code = 404, message = "Not found. It was not possible to find a node with the given path.", response = Void.class),
        @ApiResponse(code = 500, message = "Internal server error. Please retry the operation in a few moments.", response = Void.class) })
    
    @RequestMapping(value = "/api/nodes/{nodePath}/children",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> addNodeChild(@ApiParam(value = "The path of the node that will be added a child (using ~~ instead of / as zpath separator).",required=true ) @PathVariable("nodePath") String nodePath,@ApiParam(value = "The data of the new node (name and value)."  )  @Valid @RequestBody NodeCreationRequest body);


    @ApiOperation(value = "Deletes the given data node.", notes = "Deletes the given data node.", response = Void.class, tags={ "Config", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Successful request. No content is returned.", response = Void.class),
        @ApiResponse(code = 401, message = "Unauthorized call. Invalid user authentication cookie.", response = Void.class),
        @ApiResponse(code = 404, message = "Not found. It was not possible to find a node with the given path.", response = Void.class),
        @ApiResponse(code = 500, message = "Internal server error. Please retry the operation in a few moments.", response = Void.class) })
    
    @RequestMapping(value = "/api/nodes/{nodePath}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteNode(@ApiParam(value = "The path of the node whose data will be deleted (using ~~ instead of / as zpath separator).",required=true ) @PathVariable("nodePath") String nodePath);


    @ApiOperation(value = "Retrieves the children of the given data node.", notes = "Retrieves the children of the given data node.", response = ChildrenNodes.class, tags={ "Config", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful request. The list of children is returned.", response = ChildrenNodes.class),
        @ApiResponse(code = 401, message = "Unauthorized call. Invalid user authentication cookie.", response = Void.class),
        @ApiResponse(code = 404, message = "Not found. It was not possible to find a node with the given path.", response = Void.class),
        @ApiResponse(code = 500, message = "Internal server error. Please retry the operation in a few moments.", response = Void.class) })
    
    @RequestMapping(value = "/api/nodes/{nodePath}/children",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ChildrenNodes> getNodeChildren(@ApiParam(value = "The path of the node whose children will be retrieved (using ~~ instead of / as zpath separator).",required=true ) @PathVariable("nodePath") String nodePath);


    @ApiOperation(value = "Retrieves the data of the given data node.", notes = "Retrieves the data of the given data node.", response = NodeData.class, tags={ "Config", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful request. The node data is returned.", response = NodeData.class),
        @ApiResponse(code = 401, message = "Unauthorized call. Invalid user authentication cookie.", response = Void.class),
        @ApiResponse(code = 404, message = "Not found. It was not possible to find a node with the given path.", response = Void.class),
        @ApiResponse(code = 500, message = "Internal server error. Please retry the operation in a few moments.", response = Void.class) })
    
    @RequestMapping(value = "/api/nodes/{nodePath}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<NodeData> getNodeData(@ApiParam(value = "The path of the node whose data will be retrieved (using ~~ instead of / as zpath separator).",required=true ) @PathVariable("nodePath") String nodePath);


    @ApiOperation(value = "Retrieves the data type of the given node.", notes = "Retrieves the data type of the given node.", response = NodeDataType.class, tags={ "Config", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful request. The node data type is returned.", response = NodeDataType.class),
        @ApiResponse(code = 401, message = "Unauthorized call. Invalid user authentication cookie.", response = Void.class),
        @ApiResponse(code = 404, message = "Not found. It was not possible to find a node with the given path.", response = Void.class),
        @ApiResponse(code = 500, message = "Internal server error. Please retry the operation in a few moments.", response = Void.class) })
    
    @RequestMapping(value = "/api/nodes/{nodePath}/data_type",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<NodeDataType> getNodeDataType(@ApiParam(value = "The path of the node whose data type will be retrieved (using ~~ instead of / as zpath separator).",required=true ) @PathVariable("nodePath") String nodePath);


    @ApiOperation(value = "Retrieves an export for the given node.", notes = "Retrieves an export for the given node. The export contains the node, including its path and value, and all of its children. Exports are useful for saving snapshots of a given node and subsequently restoring them.", response = NodeExport.class, tags={ "Config", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful request. The node export is returned.", response = NodeExport.class),
        @ApiResponse(code = 401, message = "Unauthorized call. Invalid user authentication cookie.", response = Void.class),
        @ApiResponse(code = 404, message = "Not found. It was not possible to find a node with the given path.", response = Void.class),
        @ApiResponse(code = 500, message = "Internal server error. Please retry the operation in a few moments.", response = Void.class) })
    
    @RequestMapping(value = "/api/nodes/{nodePath}/export",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<NodeExport> getNodeExport(@ApiParam(value = "The path of the node whose data will be exported (using ~~ instead of / as zpath separator).",required=true ) @PathVariable("nodePath") String nodePath);


    @ApiOperation(value = "Imports a previously obtained export into the given node.", notes = "Imports a previously obtained export into the given node. It is possible to specify whether the value of already existing nodes should be overwritten, and whether the import should prune nodes existing in ZooKeeper that do not exist in the export.", response = Void.class, tags={ "Config", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Successful request. The node export has been successfully restored.", response = Void.class),
        @ApiResponse(code = 400, message = "Bad request. The request is not a well-formed request or it is missing some required parameters. An error message is returned indicating the nature of the error.", response = Void.class),
        @ApiResponse(code = 401, message = "Unauthorized call. Invalid user authentication cookie.", response = Void.class),
        @ApiResponse(code = 404, message = "Not found. It was not possible to find a node with the given path.", response = Void.class),
        @ApiResponse(code = 500, message = "Internal server error. Please retry the operation in a few moments.", response = Void.class) })
    
    @RequestMapping(value = "/api/nodes/{nodePath}/export",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> restoreNodeExport(@ApiParam(value = "The path of the node whose data will be restored (using ~~ instead of / as zpath separator).",required=true ) @PathVariable("nodePath") String nodePath,@ApiParam(value = "Indicates whether the import should prune nodes existing in ZooKeeper that do not exist in the export. The default is `false`.", defaultValue = "false") @RequestParam(value = "prune", required = false, defaultValue="false") Boolean prune,@ApiParam(value = "Indicates whether the value of already existing nodes should be overwritten. The default is `true`.", defaultValue = "true") @RequestParam(value = "overwrite", required = false, defaultValue="true") Boolean overwrite,@ApiParam(value = "The node export that will be restored into the specified path."  )  @Valid @RequestBody NodeExport node);


    @ApiOperation(value = "Sets the data of the given data node.", notes = "Sets the data of the given data node.", response = Void.class, tags={ "Config", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Successful request. No content is returned.", response = Void.class),
        @ApiResponse(code = 400, message = "Bad request. The request is not a well-formed request or it is missing some required parameters. An error message is returned indicating the nature of the error.", response = Void.class),
        @ApiResponse(code = 401, message = "Unauthorized call. Invalid user authentication cookie.", response = Void.class),
        @ApiResponse(code = 404, message = "Not found. It was not possible to find a node with the given path.", response = Void.class),
        @ApiResponse(code = 500, message = "Internal server error. Please retry the operation in a few moments.", response = Void.class) })
    
    @RequestMapping(value = "/api/nodes/{nodePath}",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> setNodeData(@ApiParam(value = "The path of the node whose data will be set (using ~~ instead of / as zpath separator).",required=true ) @PathVariable("nodePath") String nodePath,@ApiParam(value = "The data to set to the given node."  )  @Valid @RequestBody NodeData nodeData);


    @ApiOperation(value = "Sets the data type of the given node.", notes = "Sets the data type of the given node.", response = Void.class, tags={ "Config", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Successful request. The node data type has been successfully set.", response = Void.class),
        @ApiResponse(code = 400, message = "Bad request. The request is not a well-formed request or it is missing some required parameters. An error message is returned indicating the nature of the error.", response = Void.class),
        @ApiResponse(code = 401, message = "Unauthorized call. Invalid user authentication cookie.", response = Void.class),
        @ApiResponse(code = 404, message = "Not found. It was not possible to find a node with the given path.", response = Void.class),
        @ApiResponse(code = 500, message = "Internal server error. Please retry the operation in a few moments.", response = Void.class) })
    
    @RequestMapping(value = "/api/nodes/{nodePath}/data_type",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> setNodeDataType(@ApiParam(value = "The path of the node whose data will be restored (using ~~ instead of / as zpath separator).",required=true ) @PathVariable("nodePath") String nodePath,@ApiParam(value = "The node data type to set to the node at the specified path." ,required=true )  @Valid @RequestBody NodeDataType nodeDataType);

}
