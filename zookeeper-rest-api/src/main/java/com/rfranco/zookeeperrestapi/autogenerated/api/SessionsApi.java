/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3-SNAPSHOT).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.rfranco.zookeeperrestapi.autogenerated.api;

import com.rfranco.zookeeperrestapi.autogenerated.dtos.UserCredentials;
import com.rfranco.zookeeperrestapi.autogenerated.dtos.UserSession;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2017-12-11T09:09:52.719+01:00")

@Api(value = "Sessions", description = "the Sessions API")
public interface SessionsApi {

    @ApiOperation(value = "Finishes the current session.", notes = "Finishes the current session. As a result, the server will remove (overwrite) the `ACCESS_TOKEN` cookie will be removed. If you are not accessing this API from a browser or any other framework that automatically manages cookies, you also have to manually remove the `ACCESS_TOKEN` cookie from your client.", response = Void.class, tags={ "Sessions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Successful request. The session has been successfully closed. No content is returned in the response body.", response = Void.class),
        @ApiResponse(code = 401, message = "Unauthorized call. Invalid user authentication cookie.", response = Void.class),
        @ApiResponse(code = 500, message = "Internal server error. Please retry the operation in a few moments.", response = Void.class) })
    
    @RequestMapping(value = "/api/sessions/current",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> closeSession();


    @ApiOperation(value = "Creates a new user session, given a user name and a password.", notes = "Creates a new user session, given a user name and a password.  This operation returns a cookie named `ACCESS_TOKEN` in the response. This cookie must be provided in any subsequent call to the API in order to be correctly authenticated. If you are accessing this API from a web application running in a browser, the browser will already do it for you. ", response = UserSession.class, tags={ "Sessions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful request. The user session has been correctly created. The user claims and session expiration are returned in the response body and the access token is returned in the `ACCESS_TOKEN` cookie.", response = UserSession.class),
        @ApiResponse(code = 400, message = "Bad request. The request is not a well-formed request or it is missing some required parameters. An error message is returned indicating the nature of the error.", response = Void.class),
        @ApiResponse(code = 401, message = "Unauthorized call. Invalid user credentials.", response = Void.class),
        @ApiResponse(code = 500, message = "Internal server error. Please retry the operation in a few moments.", response = Void.class) })
    
    @RequestMapping(value = "/api/sessions",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<UserSession> createNewUserSession(@ApiParam(value = "The user credentials used create a new user session." ,required=true )  @Valid @RequestBody UserCredentials userCredentials);


    @ApiOperation(value = "Retrieves information about the ongoing session.", notes = "Retrieves information about the ongoing session. This operation is useful for checking weather the session is active.", response = UserSession.class, tags={ "Sessions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful request. The user session has been correctly retrieved. The user claims and session expiration are returned in the response body.", response = UserSession.class),
        @ApiResponse(code = 401, message = "Unauthorized call. Invalid user authentication cookie.", response = Void.class),
        @ApiResponse(code = 500, message = "Internal server error. Please retry the operation in a few moments.", response = Void.class) })
    
    @RequestMapping(value = "/api/sessions/current",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<UserSession> getSessionInfo();


    @ApiOperation(value = "Refreshes the ongoing user session.", notes = "Refreshes the ongoing user session. This operation returns a new `ACCESS_TOKEN` cookie in the response.", response = UserSession.class, tags={ "Sessions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful request. The user session has been correctly refreshed. The user claims and session expiration are returned in the response body and the new access token is returned in the `ACCESS_TOKEN` cookie.", response = UserSession.class),
        @ApiResponse(code = 400, message = "Bad request. The request is not a well-formed request or it is missing some required parameters. An error message is returned indicating the nature of the error.", response = Void.class),
        @ApiResponse(code = 401, message = "Unauthorized call. Invalid user authentication cookie.", response = Void.class),
        @ApiResponse(code = 500, message = "Internal server error. Please retry the operation in a few moments.", response = Void.class) })
    
    @RequestMapping(value = "/api/sessions/current",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<UserSession> refreshSession();

}
