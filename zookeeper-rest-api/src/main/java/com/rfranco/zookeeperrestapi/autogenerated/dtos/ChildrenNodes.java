package com.rfranco.zookeeperrestapi.autogenerated.dtos;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import javax.validation.Valid;
import javax.validation.constraints.*;

/**
 * ChildrenNodes
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2017-11-30T13:29:36.381+01:00")

public class ChildrenNodes   {
  @JsonProperty("children")
  private List<String> children = new ArrayList<String>();

  public ChildrenNodes children(List<String> children) {
    this.children = children;
    return this;
  }

  public ChildrenNodes addChildrenItem(String childrenItem) {
    this.children.add(childrenItem);
    return this;
  }

   /**
   * The list of children node names.
   * @return children
  **/
  @ApiModelProperty(required = true, value = "The list of children node names.")
  @NotNull


  public List<String> getChildren() {
    return children;
  }

  public void setChildren(List<String> children) {
    this.children = children;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChildrenNodes childrenNodes = (ChildrenNodes) o;
    return Objects.equals(this.children, childrenNodes.children);
  }

  @Override
  public int hashCode() {
    return Objects.hash(children);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChildrenNodes {\n");
    
    sb.append("    children: ").append(toIndentedString(children)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

