package com.rfranco.zookeeperrestapi.controllers;

import com.rfranco.zookeeperrestapi.autogenerated.api.NodesApi;
import com.rfranco.zookeeperrestapi.autogenerated.dtos.ChildrenNodes;
import com.rfranco.zookeeperrestapi.autogenerated.dtos.NodeCreationRequest;
import com.rfranco.zookeeperrestapi.autogenerated.dtos.NodeData;
import com.rfranco.zookeeperrestapi.autogenerated.dtos.NodeExport;
import com.rfranco.zookeeperrestapi.exceptions.InternalServerErrorException;
import com.rfranco.zookeeperrestapi.services.ZooKeeperService;
import io.swagger.annotations.ApiParam;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;

/**
 * Created by ruben.martinez on 21/11/2017.
 */
@RestController
public class NodesController implements NodesApi {
    private Logger logger = LoggerFactory.getLogger(NodesController.class);
    @Autowired
    private ZooKeeperService zooKeeperService;

    @Override
    public ResponseEntity<Void> addNodeChild(@ApiParam(value = "The path of the node that will be added a child (with ~ instead of /).", required = true) @PathVariable("nodePath") String nodePath, @ApiParam(value = "The data of the new node (name and value).") @Valid @RequestBody NodeCreationRequest body) {
        try {
            zooKeeperService.addNode(nodePath.replace('~', '/'), body);
            return new ResponseEntity<>(HttpStatus.NO_CONTENT);
        } catch(Exception ex) {
            throw new InternalServerErrorException(ex.getMessage(), ex);
        }
    }

    @Override
    public ResponseEntity<Void> deleteNode(@ApiParam(value = "The path of the node whose data will be deleted  (with ~ instead of /).", required = true) @PathVariable("nodePath") String nodePath) {
        try {
            zooKeeperService.deleteNode(nodePath.replace('~', '/'));
            return new ResponseEntity<>(HttpStatus.NO_CONTENT);
        } catch(Exception ex) {
            throw new InternalServerErrorException(ex.getMessage(), ex);
        }
    }

    @Override
    public ResponseEntity<ChildrenNodes> getNodeChildren (
            @ApiParam(value = "The identifier of the node whose children will be retrieved.", required = true)
            @PathVariable("nodePath") String nodePath) {
        try {
            return ResponseEntity.ok(new ChildrenNodes().children(zooKeeperService.getNodeChildren(nodePath.replace('~', '/'))));
        } catch(Exception ex) {
            throw new InternalServerErrorException(ex.getMessage(), ex);
        }
    }

    @Override
    public ResponseEntity<NodeData> getNodeData(@ApiParam(value = "The path of the node whose data will be retrieved  (with ~ instead of /).", required = true)
                                                    @PathVariable("nodePath") String nodePath) {
        try {
            return ResponseEntity.ok(new NodeData().data(zooKeeperService.getNodeData(nodePath.replace('~', '/'))));
        } catch(Exception ex) {
            throw new InternalServerErrorException(ex.getMessage(), ex);
        }
    }

    @Override
    public ResponseEntity<NodeExport> getNodeExport(@ApiParam(value = "The path of the node whose data will be exported (with ~ instead of /).", required = true)
                                              @PathVariable("nodePath") String nodePath) {
        try {
            return ResponseEntity.ok(zooKeeperService.getNodeExport(nodePath.replace('~', '/')));
        } catch(Exception ex) {
            throw new InternalServerErrorException(ex.getMessage(), ex);
        }
    }

    @Override
    public ResponseEntity<Void> restoreNodeExport(
            @ApiParam(value = "The path of the node whose data will be restored (with ~ instead of /).", required = true)
            @PathVariable("nodePath") String nodePath,
            @ApiParam(value = "Indicates whether the import should prune nodes existing in ZooKeeper that do not exist in the export. The default is `false`.", defaultValue = "false")
            @RequestParam(value = "prune", required = false, defaultValue = "false") Boolean prune,
            @ApiParam(value = "Indicates whether the value of already existing nodes should be overwritten. The default is `true`.", defaultValue = "true")
            @RequestParam(value = "overwrite", required = false, defaultValue = "true") Boolean overwrite,
            @ApiParam(value = "The node export that will be restored into the specified path.")
            @Valid @RequestBody NodeExport node) {
        try {
            zooKeeperService.restoreNodeExport(nodePath.replace('~', '/'), node, prune, overwrite);
            return ResponseEntity.status(HttpStatus.NO_CONTENT).build();
        } catch(Exception ex) {
            throw new InternalServerErrorException(ex.getMessage(), ex);
        }
    }


    @Override
    public ResponseEntity<Void> setNodeData(@ApiParam(value = "The path of the node whose data will be set  (with ~ instead of /).", required = true)
                                            @PathVariable("nodePath") String nodePath,
                                            @ApiParam(value = "The data to set to the given node.")
                                            @Valid @RequestBody NodeData nodeData) {
        try {
            zooKeeperService.setNodeData(nodePath.replace('~', '/'), nodeData.getData());
            return new ResponseEntity<>(HttpStatus.NO_CONTENT);
        } catch(Exception ex) {
            throw new InternalServerErrorException(ex.getMessage(), ex);
        }
    }

    @ExceptionHandler(InternalServerErrorException.class)
    public ResponseEntity<String> handleInternalServerError(InternalServerErrorException ex) {
        logger.error(ex.getMessage(), ex);
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(ex.getMessage());
    }
}
