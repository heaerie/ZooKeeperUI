import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';
import { Node } from '../../model/Node';
import { ConfigApi } from '../../autogenerated/api/ConfigApi';
import { BsModalService } from 'ngx-bootstrap/modal';
import { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';
import { AlertList, Alert, AlertType} from '../alerts/alerts.component';

@Component({
  selector: 'app-node',
  templateUrl: './node.component.html',
  styleUrls: ['./node.component.css']
})
export class NodeComponent implements OnInit {
  @Input() node: Node;
  @Output() onNavigateToNode = new EventEmitter<void>();
  private _editable: boolean;
  modalRef: BsModalRef;
  alerts: AlertList;
  editedValue: string;

  constructor(private _configApi : ConfigApi, private modalService: BsModalService) {
    this._editable = false;
    this.alerts = new AlertList();
  }

  ngOnInit() {
    this.retrieveNodeData();
  }

  navigateToNode() {
    this.onNavigateToNode.emit();
  }

  set editable(value: boolean) {
    this._editable = true;
    document.getElementById("nameInput").focus();
  }

  get editable(): boolean {
    return this._editable;
  }

  onValueEdited(event: any): void {
    // The pressed key is enter
    if (event.keyCode == 13) {
      this._editable = false;
      this.node.value = this.editedValue;
      this._configApi.setNodeData(this.node.path, { data: this.node.value }).subscribe(
        data => {},
        error => {
          this.onHttpError(error);
        }
      );
    }

    // The pressed key is escape
    if (event.keyCode == 27) {
      this._editable = false;
      this.editedValue = this.node.value;
    }
  }

  openDeletionModal(template: any) {
    this.modalRef = this.modalService.show(template);
  }

  confirmDeletion() {
    this.modalRef.hide();
    this._configApi.deleteNode(this.node.path).subscribe(
      data => {
        this.node.delete();
      },
      error => {
        this.onHttpError(error);
      }
    );
  }

  onHttpError(error) {
    this.alerts.addAlert({
      alertType: AlertType.Error,
      message: `Error received from ZooKeeper REST API. Status code: ${error.status}. Error message: ${error._body}`
    });
  }

  retrieveNodeData() {
    this._configApi.getNodeData(this.node.path)
      .subscribe(
        nodeData => {
          this.node.value = nodeData.data;
          this.editedValue = nodeData.data;
        },
        error => {
          this.onHttpError(error);
        }
      );
  }
}
