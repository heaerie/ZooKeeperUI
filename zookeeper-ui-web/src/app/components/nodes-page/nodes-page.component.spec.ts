import { async, ComponentFixture, TestBed, fakeAsync, tick } from '@angular/core/testing';
import { Router, ActivatedRoute, ParamMap } from '@angular/router';
import { By } from '@angular/platform-browser';
import { RouterLinkStubDirective } from '../../testing/router-stubs';
import { FormsModule } from '@angular/forms';

import { NodesPageComponent } from './nodes-page.component';
import { NodeComponent } from '../node/node.component';
import { AlertsComponent } from '../alerts/alerts.component';
import { LoadingSpinnerComponent } from '../loading-spinner/loading-spinner.component';
import { NodeCreationModalComponent } from '../node-creation-modal/node-creation-modal.component';
import { FileUploadModalComponent } from '../file-upload-modal/file-upload-modal.component';

import { ConfigApi } from '../../autogenerated/api/ConfigApi';
import { ModalModule, BsModalService } from 'ngx-bootstrap/modal';
import { Node } from '../../model/Node';
import { Observable } from 'rxjs';

describe('NodesPageComponent', () => {
  let component: NodesPageComponent;
  let fixture: ComponentFixture<NodesPageComponent>;
  let configApi: ConfigApi;
  let activatedRoute: ActivatedRoute;
  let bsModalService: BsModalService;
  let testNodePath = '/test/node/path/nodeName';

  let bsModalServiceStub = {
    show: function(object: any) { }
  };

  let activatedRouteStub = {
    params: Observable.of({'nodePath': testNodePath})
  };

  let configApiStub = {
    getNodeChildren: function(nodePath: string) {
      return Observable.never();
    },
    getNodeExport: function(nodePath: string) { }
  };

  beforeEach(async(() => {
    TestBed.configureTestingModule({
      imports: [ ModalModule, FormsModule ],
      declarations: [
        NodesPageComponent,
        NodeComponent,
        AlertsComponent,
        LoadingSpinnerComponent,
        RouterLinkStubDirective
      ],
      providers: [
        { provide: ConfigApi, useValue: configApiStub },
        { provide: ActivatedRoute, useValue: activatedRouteStub },
        { provide: BsModalService, useValue: bsModalServiceStub }
      ]
    })
    .compileComponents();
  }));

  beforeEach(() => {
    fixture = TestBed.createComponent(NodesPageComponent);
    component = fixture.componentInstance;
    configApi = fixture.debugElement.injector.get(ConfigApi);
    activatedRoute = fixture.debugElement.injector.get(ActivatedRoute);
    bsModalService = fixture.debugElement.injector.get(BsModalService);
  });

  it('should, on initialization, read the node path from query params, set the current node from it and load its children', fakeAsync(() => {
    let spy = spyOn(configApi, 'getNodeChildren')
        .and.returnValue(Observable.never());

    tick();
    fixture.detectChanges();
    expect(component.currentNode).not.toBeUndefined();
    expect(component.currentNode.path).toBe(testNodePath);
    expect(configApi.getNodeChildren).toHaveBeenCalledWith(testNodePath);
  }));

  it('should open the add node modal when the plus button is pressed', () => {
    component.currentNode = new Node(testNodePath);
    let spy = spyOn(bsModalService, 'show')
        .and.returnValue(
          {
            'content': {
              'onAlert': Observable.never(),
              'onFileLoaded':  Observable.never()
            }
          }
        );
    fixture.debugElement.query(By.css('.add-node-selector')).triggerEventHandler('click', null);
    expect(bsModalService.show).toHaveBeenCalledWith(NodeCreationModalComponent);
  });

  it('should retrieve the current node export when the export button is pressed', () => {
    component.currentNode = new Node(testNodePath);
    let spy = spyOn(configApi, 'getNodeExport')
        .and.returnValue(Observable.never());
    fixture.debugElement.query(By.css('.export-button-selector')).triggerEventHandler('click', null);
    expect(configApi.getNodeExport).toHaveBeenCalledWith(testNodePath);
  });

  it('should open the file upload modal when the import button is pressed', () => {
    component.currentNode = new Node(testNodePath);
    let spy = spyOn(bsModalService, 'show')
        .and.returnValue(
          {
            'content': {
              'onAlert': Observable.never(),
              'onFileLoaded':  Observable.never()
            }
          }
        );
    fixture.debugElement.query(By.css('.import-button-selector')).triggerEventHandler('click', null);
    expect(bsModalService.show).toHaveBeenCalledWith(FileUploadModalComponent);
  });
});
