import { Component, OnInit, EventEmitter } from '@angular/core';
import { Router, ActivatedRoute, ParamMap } from '@angular/router';
import 'rxjs/add/operator/switchMap';
import { ConfigApi } from '../../autogenerated/api/ConfigApi';
import { ChildrenNodes } from '../../autogenerated/model/ChildrenNodes';
import { Node } from '../../model/Node';
import { BsModalService } from 'ngx-bootstrap/modal';
import { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';
import { NodeCreationModalComponent } from '../node-creation-modal/node-creation-modal.component';
import { FileUploadModalComponent, UploadOptions } from '../file-upload-modal/file-upload-modal.component';
import { NodeExport } from '../../autogenerated/model/NodeExport';
import { AlertList, Alert, AlertType} from '../alerts/alerts.component';

@Component({
  selector: 'app-nodes-page',
  templateUrl: './nodes-page.component.html',
  styleUrls: ['./nodes-page.component.css']
})
export class NodesPageComponent implements OnInit {
  currentNode: Node;
  alerts: AlertList;
  modalRef: BsModalRef;
  currentNodeParents: Node[];
  loading: boolean;

  constructor(private _configApi : ConfigApi,
              private modalService: BsModalService,
              private route: ActivatedRoute) {
    this.alerts = new AlertList();
  }

  ngOnInit() {
    this.route.params.map(params => params['nodePath'])
      .subscribe((nodePath) => this.setCurrentNode(nodePath));

    this.currentNodeParents = this.currentNode.parents;
    this.loading = true;
  }

  setCurrentNode(nodePath: string): void {
    this.currentNode = new Node(nodePath);
    this.currentNodeParents = this.currentNode.parents;
    this.reloadNodeChildren(this.currentNode);
  }

  reloadNodeChildren(node: Node, loadGrandChildren: boolean = true) {
    this.loading = true;
    this._configApi.getNodeChildren(node.path)
      .subscribe(
        childrenNodes => {
          this.loading = false;
          node.clearChildren();
          for (let childName of childrenNodes.children) {
            let childNode = node.addChildNode(childName);
            if (loadGrandChildren) {
              this.reloadNodeChildren(childNode, false);
            }
          }
        },
        error => {
          this.loading = false;
          this.alerts.addAlert(Alert.fromResponse(error));
        }
      );
  }

  openAddNodeModal() {
    this.modalRef = this.modalService.show(NodeCreationModalComponent);
    this.modalRef.content.parentNode = this.currentNode;
    (this.modalRef.content.onAlert as EventEmitter<Alert>).subscribe(alert =>
      {
        this.alerts.addAlert(alert);
      }
    );
  }

  downloadNodeReport() {
    this._configApi.getNodeExport(this.currentNode.path).subscribe(
      exportData => {
        var link = document.createElement("a");
        link.download = "zookeeper-export.json";
        link.href = "data:application/json," + encodeURIComponent(JSON.stringify(exportData));
        link.click();
        this.alerts.addAlert({
          alertType: AlertType.Success,
          message: `Node exported successfully!`
        });
      },
      error => {
        this.alerts.addAlert(Alert.fromResponse(error));
      }
    );
  }

  openFileUploadModal() {
    this.modalRef = this.modalService.show(FileUploadModalComponent);
    this.modalRef.content.nodePath = this.currentNode.path;
    (this.modalRef.content.onFileLoaded as EventEmitter<NodeExport>).subscribe(
      (exportOptions: UploadOptions) => {
        this._configApi.restoreNodeExport(this.currentNode.path, exportOptions.prune, exportOptions.overwriteValues, exportOptions.node)
          .subscribe(
            data => {
              this.modalRef.hide();
              this.reloadNodeChildren(this.currentNode);
              this.alerts.addAlert({
                alertType: AlertType.Success,
                message: `Nodes export successfully restored!`
              });
            },
            error => {
              this.alerts.addAlert(Alert.fromResponse(error));
              this.modalRef.hide();
            }
          );
      }
    );
  }
}
