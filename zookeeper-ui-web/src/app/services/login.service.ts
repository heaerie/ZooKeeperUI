import { Injectable } from '@angular/core';
import { UserSession } from '../autogenerated/model/UserSession';
import { SessionsApi } from '../autogenerated/api/SessionsApi';
import { Router } from '@angular/router';
import { Observable, BehaviorSubject } from 'rxjs';

@Injectable()
export class LoginService {
  private _isLoggedInObservable: BehaviorSubject<boolean>;

  constructor(private _sessionsApi: SessionsApi, private _router: Router) {
    this._isLoggedInObservable = new BehaviorSubject<boolean>(false);
    this.getSessionInfo();
  }

  private set loggedIn(value: boolean) {
    if (value === false) {
      this._router.navigate(['/login']);
    }
    this._isLoggedInObservable.next(value);
  }

  public get loggedInObservable(): Observable<boolean> {
    return this._isLoggedInObservable;
  }

  logIn(userName: string, password: string): Observable<UserSession> {
    let observableSession = this._sessionsApi.createNewUserSession({
      userName: userName,
      password: password
    });

    observableSession.subscribe(
      sessionInfo => {
        this.loggedIn = true;
        setTimeout(() => {
          this.loggedIn = false;
        }, sessionInfo.expirationSeconds * 1000);
      },
      error => {
        console.log('Murali ---', error.status);
        if (error.status === 401) {
          this.loggedIn = false;
        } else {
          this._isLoggedInObservable.error(error);
        }
      }
    );

    return observableSession;
  }

  logOut(): Observable<{}> {
    let observable = this._sessionsApi.closeSession();
    observable.subscribe(
      sessionInfo => this.loggedIn = false,
      error => {
        if (error.status === 401) {
          this.loggedIn = false;
        } else {
          this._isLoggedInObservable.error(error);
        }
      }
    );
    return observable;
  }

  private getSessionInfo(): void {
    this._sessionsApi.getSessionInfo().subscribe(
      sessionInfo => {
        this.loggedIn = true;
        setTimeout(() => {
          this.loggedIn = false;
        }, sessionInfo.expirationSeconds * 1000);
      },
      error => {
        if (error.status === 401) {
          this.loggedIn = false;
        } else {
          this._isLoggedInObservable.error(error);
        }
      }
    );
  }
}
